name: PR‑E2E‑KinD‑Testkube
on:
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  contents: read          # needed by checkout
  id-token: write         # for ghcr if you push images
jobs:
  e2e:
    runs-on: ubuntu-latest       # free‑tier hosted runner
    timeout-minutes: 25          # protect your 2 000 free minutes
    steps:
    # 1 – Grab code ----------------------------------------------------------
    - uses: actions/checkout@v4

    # 2 – Spin cluster (KinD) -----------------------------------------------
    - uses: engineerd/setup-kind@v0.5.0              # :contentReference[oaicite:0]{index=0}
      with:
        version: v0.23.0         # update if needed
        name: pr-${{ github.run_id }}
        wait: 30s                # give kube‑api a moment to come up
        # example of a 2‑node cluster (uncomment if you need it)
        # config: |
        #   kind: Cluster
        #   apiVersion: kind.x-k8s.io/v1alpha4
        #   nodes:
        #   - role: control-plane
        #   - role: worker

    # 3 – Install Helm & kubectl are already present ------------------------
    - uses: azure/setup-helm@v4           # tiny fast action

    # 4 – Install a standalone Agent ----------------------------------------    
    - name: Setup Testkube CLI
      uses: kubeshop/setup-testkube@v1
      with:
        organization: tkcorg_0f382d90e81ea228
        environment: tkcenv_943fe797cb48b4d2
        token: ${{ secrets.TESTKUBE_TOKEN }}

    # 5 - Creating a floating runner within the KinD cluster
    - name: Provision floating runner
      run: |
        testkube install runner github-action-runner --create --floating

    # 6 – Wait for the agent to be ready (simplest check) -------------------
#    - name: Wait for Agent
#      run: |
#        kubectl -n testkube rollout status deploy/testkube-agent --timeout=120s

#    # 7 – Register / trigger your Testkube workflows ------------------------
#    - name: Kick off Testkube workflows
#      run: |
#        # example: apply CRDs stored in repo
#        kubectl apply -f testkube/workflows/
#        # or call the SaaS API if you prefer
#        # testkube run workflow my‑workflow --namespace testkube

#    # 8 – Retrieve results (optional) ---------------------------------------
#    - name: Get results
#      run: |
#        kubectl get testworkflows -A
#        kubectl logs -n testkube deployment/testkube-agent

    # 9 – Cluster auto‑deletes with the runner VM ---------------------------
    # No explicit cleanup is required, but you can add:
    # - name: Dump logs on failure
    #   if: failure()
    #   run: kind export logs /tmp/artifacts && tar -czf logs.tgz /tmp/artifacts
